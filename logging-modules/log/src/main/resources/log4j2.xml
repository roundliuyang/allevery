<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="INFO">

    <!--您可以为每个 appender 设置一个名称，例如使用名称控制台而不是 stdout-->

    <!--注意PatternLayout元素它决定了消息应该是什么样子的。在我们的例子中，模式是根据pattern参数设置的，
    其中%d决定了日期模式，%p-输出日志级别，%m-输出日志信息，%n-添加新行符号。关于模式的更多信息，你可以在Log4j2的官方
    网页上找到。最后，要启用一个（或多个）appender，你需要把它添加到<Root>部分。-->

    <Appenders>
        # Console appender
        <Console name="stdout" target="SYSTEM_OUT">
            # Pattern of log message for console appender
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %p %m%n"/>
        </Console>


        <!--File appender 有几个可以配置的参数：-->

        <!--
            file – 确定日志文件的文件名
            append – 此参数的默认值为 true，这意味着默认情况下 File appender 将附加到现有文件而不是截断它。
            PatternLayout - 在前面的示例中描述的
         -->

        <!--为了启用文件appender，你需要把它添加到<Root>部分。-->
        # File appender
        <File name="fout" fileName="log4j/target/baeldung-log4j2.log"
            immediateFlush="false" append="false">
            # Pattern of log message for file appender
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %p %m%n"/>
        </File>

        # Rolling appender
        <RollingFile name="roll-by-size"
            fileName="target/log4j2/roll-by-size/app.log" filePattern="target/log4j2/roll-by-size/app.%i.log.gz"
            ignoreExceptions="false">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss} %p %m%n</Pattern>
            </PatternLayout>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy
                    size="5 KB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="roll-by-time"
            fileName="target/log4j2/roll-by-time/app.log"
            filePattern="target/log4j2/roll-by-time/app.%d{MM-dd-yyyy-HH-mm}.log.gz"
            ignoreExceptions="false">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss} %p %m%n</Pattern>
            </PatternLayout>
            <TimeBasedTriggeringPolicy/>
        </RollingFile>

        <RollingFile name="roll-by-time-and-size"
            fileName="target/log4j2/roll-by-time-and-size/app.log"
            filePattern="target/log4j2/roll-by-time-and-size/app.%d{MM-dd-yyyy-HH-mm}.%i.log.gz"
            ignoreExceptions="false">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss} %p %m%n</Pattern>
            </PatternLayout>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy
                    size="5 KB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${baseDir}" maxDepth="2">
                    <IfFileName
                        glob="target/log4j2/roll-by-time-and-size/app.*.log.gz"/>
                    <IfLastModified age="20s"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </Appenders>

    <Loggers>
        # Override log level for specified package
        <!--
            要仅为其中一个包启用日志记录，您需要在<Root>之前将以下部分添加到log4j2.xml：

            <Logger name="com.baeldung.log4j2" level="debug">
                <AppenderRef ref="stdout"/>
            </Logger>
        -->
        <Logger name="com.baeldung.log4j2" level="TRACE"/>

        <Logger name="com.baeldung.log4j2.Log4j2RollingExample"
            level="TRACE">
            <AppenderRef ref="roll-by-size"/>
            <AppenderRef ref="roll-by-time"/>
            <AppenderRef ref="roll-by-time-and-size"/>
        </Logger>

        <!--
            如果你想让你的Log4j 2成为异步的，你需要在你的pom.xml中加入LMAX disruptor库。
            LMAX disruptor是一个无锁线程间通信库。
            如果你想使用 LMAX 干扰器，你需要在你的配置中使用 <asyncRoot> 而不是 <Root> 。
            或者你可以通过设置系统属性Log4jContextSelector为org.apache.logging.log4j.core.async.AsyncLoggerContextSelector来启用异步日志。
        -->

        <AsyncRoot level="DEBUG">
            <AppenderRef ref="stdout"/>
            <AppenderRef ref="fout"/>
        </AsyncRoot>
    </Loggers>
</Configuration>