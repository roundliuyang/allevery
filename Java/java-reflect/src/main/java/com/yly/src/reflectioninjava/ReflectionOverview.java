package com.yly.src.reflectioninjava;

/*
    java 中的反射是一个非常强大的概念，在普通编程中用处不大，但他是大多数Java ,J2EE 框架的支柱。一些使用java反射的框架是:
    1、Junit - 使用反射解析@Test 注解来获取测试方法，然后调用它。
    2、Spring - 依赖注入，在Spring Dependency Injection 阅读更多
    3、Tomcat Web 容器通过解析他们的web.xml 文件和请求URL 将请求转发到正确的模块。
    4、Eclipse自动完成方法名称
    5、Struts
    6、Hibernate

    这个列表是无穷无尽的，它们都使用 java 反射，因为所有这些框架都不知道和访问用户定义的类、接口、它们的方法等。
    由于以下缺点，我们不应该在正常编程中使用反射，因为我们已经可以访问类和接口。
    性能差——由于java反射动态解析类型，它涉及扫描类路径以查找要加载的类等处理，导致性能下降。
    安全限制– 反射需要运行时权限，在安全管理器下运行的系统可能无法使用这些权限。由于安全管理器，这可能会导致您的应用程序在运行时失败。
    安全问题——使用反射我们可以访问我们不应该访问的部分代码，例如我们可以访问类的私有字段并更改它的值。这可能是一个严重的安全威胁，并导致您的应用程序行为异常。
    高维护– 反射代码难以理解和调试，并且在编译时也无法发现代码的任何问题，因为类可能不可用，从而使其灵活性降低且难以维护。
 */
public class ReflectionOverview {

}
